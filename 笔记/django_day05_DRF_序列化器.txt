DRF框架(Django REST framework)

Restful本质:
	浏览器请求服务器:json转模型 --反序列化
	服务器响应浏览器:模型转json --序列化
	
	
 1. 序列化器
	反序列化要做的工作: 对数据进行校验
	序列化要做的工作: 从模型中挑出一些字段, 选择性的返回给浏览器
	
	定义序列化器
	class BookInfoSerializer(serializers.Serializer):
		id = serializers.IntegerField(label='ID',read_only=True)
		btitle = serializers.CharField(max_length=20)
		bpub_date = serializers.DateField()
		bread = serializers.IntegerField(required=False,dafault=0)
		bcomment = serializers.IntegerField(required=False)
		is_delete = serializers.BooleanField(write_only=True)
		
		序列化器中的方法示例
		1>
		create(self, validated_data):
			"""新建"""
			ruturn BookInfo.objects.create(**validate)data)
		2>
		update(self, instance, validated_data):
			"""更新"""
			instance.btitle = validated_data.get('btitle', instance.btitle)
			...
			instance.save()
			return instance
	
	序列化操作
	def serializer(request):
		books = BookInfo.objects.all()
		s = BookInfoSerializer(books, many=True)
		s.data
		
	反序列化操作
	def deserializer(request):
		data = {'btitle': '西游记', 'bpub_date': '1999-2-2'}
		s = BookInfoSerializer(data=data)
		s.is_valid()
		s.errors
		s.validated_data

2.关联对象嵌套序列化
	1） PrimaryKeyRelatedField
		hbook = serializers.PrimaryKeyRelatedField(label='图书', read_only=True)
		hbook = serializers.PrimaryKeyRelatedField(label='图书', queryset=BookInfo.objects.all())
		包含read_only=True参数时，该字段不能用作反序列化使用
		包含queryset参数时，将被用作反序列化时参数校验使用
	2) StringRelatedField
		字段将被序列化为关联对象的字符串表示方式（即__str__方法的返回值）
		hbook = serializers.StringRelatedField(label='图书')
	3）HyperlinkedRelatedField
		此字段将被序列化为获取关联对象数据的接口链接
	4）SlugRelatedField
		此字段将被序列化为关联对象的指定字段数据
			hbook = serializers.SlugRelatedField(label='图书', read_only=True, slug_field='bpub_date')
			slug_field指明使用关联对象的哪个字段
	5）使用关联对象的序列化器(通用)
		hbook = BookInfoSerializer(read_only=True)
		使用效果示例
		{'id': 6, 'hname': '乔峰', 'hgender': 1, 'hcomment': '降龙十八掌', 'hbook': OrderedDict([('id', 2), ('btitle', '天龙八部')te', '1986-07-24'), ('bread', 36), ('bcomment', 40), ('image', None)])}
	6） 重写to_representation方法
		自定义一个新的关联字段：
			class BookRelateField(serializers.RelatedField):
				"""自定义用于处理图书的字段"""
				def to_representation(self, value):
					return 'Book: %d %s' % (value.id, value.btitle)
		指明hbook为BookRelateField类型
			hbook = BookRelateField(read_only=True)
					
3.反序列化使用
	1>验证
		is_valid()  验证成功返回True，否则返回False。
		验证成功，可以通过序列化器对象的validated_data属性获取数据。
		验证失败，可以通过序列化器对象的errors属性获取错误信息.
	2>自定义验证行为
		1）validate_<field_name>
			对<field_name>字段进行验证，如
			class BookInfoSerializer(serializers.Serializer):
				"""图书数据序列化器"""
				...
				def validate_btitle(self, value):
					if 'django' not in value.lower():
						raise serializers.ValidationError("图书不是关于Django的")
					return value
		2）validate			
			在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如
			class BookInfoSerializer(serializers.Serializer):
				"""图书数据序列化器"""
				...
				def validate(self, attrs):
					bread = attrs['bread']
					bcomment = attrs['bcomment']
					if bread < bcomment:
						raise serializers.ValidationError('阅读量小于评论量')
					return attrs

3.模型类序列化器
	class BookInfoSerializer(serializers.ModelSerializer):
		"""图书模型类序列化器"""
		class Meta:
			model = BookInfo
			fields = ('id', 'btitle', 'bpub_date')
			exclude = ('image', )
			read_only_fields = ('id', 'bread', 'bcomment')
			depth = 1
			extra_kwargs = {
				'bread': {'min_value': 0, 'required': True},
				'bcomment': {'max_value': 0, 'required': True},
			}
	# model 指明参照哪个模型类
    # fields 指明模型类的哪些字段(__all__为所有字段)
    # exclude 明确排除掉哪些字段
    # read_only_fields 指明只读字段
    # depth 生成嵌套表示，depth应该是整数，表明嵌套的层级数量,生成外键指向的模型对象
    # extra_kwargs参数为ModelSerializer添加或修改原有的选项参数
	
	# 模型类序列化器已经封装了create和update方法,可以直接使用
