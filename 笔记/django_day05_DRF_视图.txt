DRF框架(Django REST framework)
	
1.request和response
	1 Request
		Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果
		常用属性
		1）.data --返回解析之后的请求体数据。
		2）.query_params  --与Django标准的request.GET相同,获取请求url中的参数
	2 Response
		使用Response构造响应对象时，响应的具体数据内容会被转换（render渲染）成符合前端需求的类型。
		1>构造方式
			Response(data, status=None, template_name=None, headers=None, content_type=None)
			参数说明：
				data: 为响应准备的序列化处理后的数据；
				status: 状态码，默认200；
				template_name: 模板名称，如果使用HTMLRenderer 时需指明；
				headers: 用于存放响应头信息的字典；
				content_type: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。
		2>常用属性
			1）.data  --传给response对象的序列化后，但尚未render处理的数据
			2）.status_code  --状态码的数字
			3）.content  --经过render处理后的响应数据
		3>状态码
			1）信息告知 - 1xx
			2）成功 - 2xx
			3）重定向 - 3xx
			4）客户端错误 - 4xx
			5）服务器错误 - 5xx

2.视图
	1 两个基类
		1）APIView
		接收的是REST framework的Request对象;
		返回REST framework的Response对象;
		任何APIException异常都会被捕获到，并且处理成合适的响应信息;
		在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制.
		支持定义的属性：
			authentication_classes 列表或元祖，身份认证类
			permissoin_classes 列表或元祖，权限检查类
			throttle_classes 列表或元祖，流量控制类
		
		2）GenericAPIView
		支持定义的属性：
			列表视图与详情视图通用：
				queryset 列表视图的查询集
				serializer_class 视图使用的序列化器
			列表视图使用：
				pagination_class 分页控制类
				filter_backends 过滤控制后端
			详情页视图使用：
				lookup_field 查询单一数据库对象时使用的条件字段，默认为'pk'
				lookup_url_kwarg 查询单一数据时URL中的参数关键字名称，默认与look_field相同
		提供的方法：
			列表视图与详情视图通用：
				get_queryset(self) 返回视图使用的查询集
				get_serializer_class(self) 返回序列化器类
				get_serializer(self, args, *kwargs) 返回序列化器对象，被其他视图或扩展类使用
			详情视图使用：
				get_object(self) 返回详情视图所需的模型类数据对象
		
	2 五个扩展类
		1）ListModelMixin
			提供list(request, *args, **kwargs)方法快速实现列表视图,会对数据进行过滤和分页。
		2）CreateModelMixin
			提供create(request, *args, **kwargs)方法快速实现创建资源的视图，成功返回201状态码。
		3） RetrieveModelMixin
			，提供retrieve(request, *args, **kwargs)方法，可以快速实现返回一个存在的数据对象。
		4）UpdateModelMixin
			提供update(request, *args, **kwargs)方法，可以快速实现更新一个存在的数据对象。
			同时也提供partial_update(request, *args, **kwargs)方法，可以实现局部更新。
		5）DestroyModelMixin
			提供destroy(request, *args, **kwargs)方法，可以快速实现删除一个存在的数据对象。
	3 几个可用子类视图
		1） CreateAPIView
			提供 post 方法
		2）ListAPIView
			提供 get 方法
		3）RetireveAPIView
			提供 get 方法
		4）DestoryAPIView
			提供 delete 方法
		5）UpdateAPIView
			提供 put 和 patch 方法
		6）RetrieveUpdateAPIView
			提供 get、put、patch方法
		7）RetrieveUpdateDestoryAPIView
			提供 get、put、patch、delete方法
			
	4 视图集ViewSet
		使用视图集ViewSet，可以将一系列逻辑相关的视图放到一个类中。
		action属性: 视图集中，可以通过action对象属性来获取请求视图集时的action动作是哪个。
		1>常用视图集父类:
			1） ViewSet
				继承自APIView，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。
				在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。
			2）GenericViewSet
				继承自GenericAPIView，作用也与GenericAPIVIew类似，提供了get_object、get_queryset等方法便于列表视图与详情信息视图的开发。
			3）ModelViewSet
				继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。
			4）ReadOnlyModelViewSet
				继承自GenericAPIVIew，同时包括了ListModelMixin、RetrieveModelMixin。
		2>视图集中定义附加action动作
			class UserViewSet(viewsets.ModelViewSet):
				queryset = User.objects.all()
				serializer_class = UserSerializer

				@action(methods=['post'], detail=True)
				def set_password(self, request, pk=None):
					pass
				method 指明请求方式
				detail 是否需要传pk参数
				
	5 路由Routers
		REST framework提供了两个router
			SimpleRouter --只能访问已经定义好的接口地址
			DefaultRouter --访问网站根目录,自动生成网页接口,
		1>使用方法
			在urls.py中
			1） 创建router对象，并注册视图集
				from rest_framework import routers
				router = routers.SimpleRouter()
				router.register(r'books', BookViewSet, base_name='book')
				# prefix --该视图集的路由前缀
				# viewset --视图集
				# base_name --路由名称的前缀
			如上述代码会形成的路由如下：
				^books/$    name: book-list
				^books/{pk}/$   name: book-detail
			2）添加路由数据
				urlpatterns = [
					...
					url(r'^', include(router.urls))
				]
		2>视图集中包含附加动作的
			from myapp.permissions import IsAdminOrIsSelf
			from rest_framework.decorators import action
			class UserViewSet(ModelViewSet):
				...
				@action(methods=['post'], detail=True)
				def set_password(self, request, pk=None):
					...
			此视图集会形成的路由：
				^users/{pk}/set_passwrod/$    name: user-set-password
		3>路由router形成URL的方式
			1）SimpleRouter
			2）DefaultRouter
