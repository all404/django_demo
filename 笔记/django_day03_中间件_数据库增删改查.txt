1.中间件
	(django中一种特殊的组件, 本质上是装饰器)
	Django中的中间件是一个轻量级、底层的插件系统，可以介入Django的请求和响应处理过程,在Django处理视图的不同阶段对输入或输出进行干预。
	def my_middleware(get_response):
		# 此处代码仅在Django第一次配置和初始化的时候执行一次。
		def middleware(request):
			# 此处代码会在每个请求处理视图前被调用。
			response = get_response(request)
			# 此处代码会在每个请求处理视图之后被调用。
			return response
		return middleware
	在settings.py中间件配置MIDDLEWARE添加中间件
2.数据库
	Django默认初始配置使用sqlite数据库。
	
	 1.配置数据库
		1>安装驱动程序
			pip install pymysql
		2>主应用目录__init__.py中添加如下语句
			from pymysql import install_as_MySQLdb
			install_as_MySQLdb()	
			# 作用是让Django的ORM能以mysqldb的方式来调用PyMySQL。
		3>修改DATABASES配置信息
			DATABASES = {
				'default': {
					'ENGINE': 'django.db.backends.mysql',
					'HOST': '127.0.0.1',  # 数据库主机
					'PORT': 3306,  # 数据库端口
					'USER': 'root',  # 数据库用户名
					'PASSWORD': 'mysql',  # 数据库用户密码,根据实际密码修改
					'NAME': 'django_demo'  # 数据库名字,需要自己创建
				}
			}
		4>在MySQL中创建数据库
			create database django_demo default charset=utf8;
	
	2.定义模型类(重点)
		在应用的models.py 文件中定义模型类。
		from django.db import models
		#定义图书模型类BookInfo
		class BookInfo(models.Model):
			btitle = models.CharField(max_length=20, verbose_name='名称')
			bpub_date = models.DateField(verbose_name='发布日期')
			bread = models.IntegerField(default=0, verbose_name='阅读量')
			bcomment = models.IntegerField(default=0, verbose_name='评论量')
			is_delete = models.BooleanField(default=False, verbose_name='逻辑删除')
			
	3.迁移
		1>生成迁移文件
			python manage.py makemigrations
		2>同步到数据库中
			python manage.py migrate
			
	4.添加测试数据
	
	5.数据库操作
		1>增加
			save --通过创建模型类对象，执行对象的save()方法保存到数据库中。
			create --通过模型类.objects.create()创建并保存。
		2.1>一般查询 --模型类.objects.方法()
			get() 查询单一结果,不存在会抛出 模型类.DoesNotExist 异常。
			all() 查询多个结果。
			count() 查询结果数量。
		2.2>过滤查询
			实现SQL中的where功能，包括
				filter() 过滤出多个结果
				exclude() 排除掉符合条件剩下的结果
				get() 过滤单一结果
			过滤条件的表达语法如下：
				属性名称__比较运算符=值
			1）相等
				exact：表示判等。
				BookInfo.objects.filter(id__exact=1)
			2）模糊查询
				contains：是否包含。
				startswith: 以指定值开头。
				endswith：以指定值结尾。
			3） 空查询
				isnull：是否为null。
				BookInfo.objects.filter(btitle__isnull=False)
			4） 范围查询
				in：是否包含在范围内。
				BookInfo.objects.filter(id__in=[1, 3, 5])
			5）比较查询
				gt 大于 (greater then)
				gte 大于等于 (greater then equal)
				lt 小于 (less then)
				lte 小于等于 (less then equal)
				例：查询编号大于3的图书
					BookInfo.objects.filter(id__gt=3)
				不等于的运算符，使用exclude()过滤器。
					BookInfo.objects.exclude(id=3)
			6）日期查询
				year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算。
				例：查询1980年发表的图书。
					BookInfo.objects.filter(bpub_date__year=1980)
			F对象:(了解)
				两个属性比较,使用F对象，被定义在django.db.models中
				例：查询阅读量大于等于评论量的图书。
					from django.db.models import F
					BookInfo.objects.filter(bread__gte=F('bcomment'))
			Q对象:(了解)
				如果需要实现逻辑或or的查询，需要使用Q()对象结合|运算符，Q对象被义在django.db.models中。
				Q对象可以使用&、|连接，&表示逻辑与，|表示逻辑或。
				例：查询阅读量大于20，或编号小于3的图书，只能使用Q对象实现
					BookInfo.objects.filter(Q(bread__gt=20) | Q(pk__lt=3))
			聚合函数(了解)
				使用aggregate()过滤器调用聚合函数。
				Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和
				例：查询图书的总阅读量。
					from django.db.models import Sum
					BookInfo.objects.aggregate(Sum('bread'))
		2.3>排序	
			使用order_by对结果进行排序
				BookInfo.objects.all().order_by('bread')  # 升序
				BookInfo.objects.all().order_by('-bread')  # 降序
		2.4>关联查询(重要)
			由一到多的访问语法：
				一对应的模型类对象.多对应的模型类名小写_set 例：
					b = BookInfo.objects.get(id=1)
					b.heroinfo_set.all()
			由多到一的访问语法:
				多对应的模型类对象.多对应的模型类中的关系类属性名 例：
				h = HeroInfo.objects.get(id=1)
				h.hbook
			关联过滤查询
				由多模型类条件查询一模型类数据:
					联模型类名小写__属性名__条件运算符=值
						查询图书，要求图书中英雄的描述包含"八"
						BookInfo.objects.filter(heroinfo__hcomment__contains='八')
				由一模型类条件查询多模型类数据:
					一模型类关联属性名__一模型类属性名__条件运算符=值
						查询图书阅读量大于30的所有英雄
						HeroInfo.objects.filter(hbook__bread__gt=30)
						
		3>修改
			1）save
				修改模型类对象的属性，然后执行save()方法
				hero = HeroInfo.objects.get(hname='猪八戒')
				hero.hname = '猪悟能'
				hero.save
			2）update
				使用模型类.objects.filter().update()，会返回受影响的行数
				HeroInfo.objects.filter(hname='沙悟净').update(hname='沙僧')
		4>删除		
			1）模型类对象delete
				hero = HeroInfo.objects.get(id=13)
				hero.delete()
			2）模型类.objects.filter().delete()
				HeroInfo.objects.filter(id=14).delete()
				
	6.查询集 QuerySet
		1>概念
			查询集，也称查询结果集、QuerySet，表示从数据库中获取的对象集合。
			当调用如下过滤器方法时，Django会返回查询集（而不是简单的列表）：
				all()：返回所有数据。
				filter()：返回满足条件的数据。
				exclude()：返回满足条件之外的数据。
				order_by()：对结果进行排序。
		2>两大特性
			1）惰性执行
				创建查询集不会访问数据库，直到调用数据时，才会访问数据库
			2）缓存
				使用同一个查询集，第一次使用时会发生数据库的查询，然后Django会把结果缓存下来，
				再次使用这个查询集时会使用缓存的数据，减少了数据库的查询次数。
		3>限制查询集
			可以对查询集进行取下标或切片操作，等同于sql中的limit和offset子句。
			对查询集进行切片后返回一个新的查询集，不会立即执行查询。
			示例：获取第1、2项。
				qs = BookInfo.objects.all()[0:2]
	7.管理器Manager
		我们在通过模型类的objects属性提供的方法操作数据库时，即是在使用一个管理器对象objects。
		它是models.Manager类的对象。
		
		我们可以自定义管理器，并应用到我们的模型类上。
		1>修改原始查询集，重写all()方法。
			a）打开booktest/models.py文件，定义类BookInfoManager

				#图书管理器
				class BookInfoManager(models.Manager):
					def all(self):
						#默认查询未删除的图书信息
						#调用父类的成员语法为：super().方法名
					return super().filter(is_delete=False)
			b）在模型类BookInfo中定义管理器
				class BookInfo(models.Model):
					...
					query = BookInfoManager()
			c）使用方法
				BookInfo.query.all()
		
		2>在管理器类中补充定义新的方法
			a）打开booktest/models.py文件，定义方法create。
				class BookInfoManager(models.Manager):
					#创建模型类，接收参数为属性赋值
					def create_book(self, title, pub_date):
						#创建模型类对象self.model可以获得模型类
						book = self.model()
						book.btitle = title
						book.bpub_date = pub_date
						book.bread=0
						book.bcommet=0
						book.is_delete = False
						# 将数据插入进数据表
						book.save()
						return book
			b）为模型类BookInfo定义管理器books语法如下
				class BookInfo(models.Model):
				  ...
				books = BookInfoManager()
			c）调用语法如下：
				book=BookInfo.books.create_book("abc",date(1980,1,1))
			